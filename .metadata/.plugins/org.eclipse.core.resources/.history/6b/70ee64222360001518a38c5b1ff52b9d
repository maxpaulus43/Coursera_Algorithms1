package week2;

import java.util.Arrays;

import week3.MergeUp;
import edu.princeton.cs.algs4.StdOut;
import edu.princeton.cs.algs4.StdRandom;
import edu.princeton.cs.algs4.Stopwatch;

public class Shell { 
	
	private Shell() {}
	
	public static void sort(Comparable[] a) throws Exception {
		int N = a.length;
		
		int delta = 1;
		while (delta < N/3) {
			delta = 3 * delta + 1; //1, 4, 13, 40, 121, ...
		}
		
		while (delta >= 1) {
			Insertion.sort(delta, a);
			delta /= 3;
		}
	}
	
	public static void print(Object[] a) {
		StdOut.print("[");
		for (int i = 0; i < 20; i++) {
			StdOut.print(" " + a[i] + " ");
		}
		StdOut.print("... ]");
		StdOut.println();
	}
	
	public static void main(String[] args) {
		int N = 2000000;
		Integer[] nums = new Integer[N];
		Integer[] nums2 = new Integer[N];
		Integer[] nums3 = new Integer[N];
		
		for (int i = 0; i < N; i++) {
			Integer n = StdRandom.uniform(N);
			nums[i] = n;
			nums2[i] = n;
			nums3[i] = n;
		}
		print(nums);
		
		try {
			StdOut.println();
			Stopwatch sw = new Stopwatch();
			Shell.sort(nums);
			StdOut.printf("Shell.sort Elapsed time: %f\n", sw.elapsedTime());
			print(nums);
			
			
			sw = new Stopwatch();
			Arrays.sort(nums2);
			StdOut.printf("\nArrays.sort Elapsed time: %f\n", sw.elapsedTime());
			print(nums2);
			
			sw = new Stopwatch();
			MergeUp.sort(nums3);
			StdOut.printf("\nMerge.sort Elapsed time: %f\n", sw.elapsedTime());
			print(nums3);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
